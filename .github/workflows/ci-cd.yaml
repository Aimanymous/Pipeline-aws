name: CI/CD Pipeline

on:
  push:
    branches:
      - Deploy

jobs:
  # Step 1: Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ap-southeast-1
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        run: |
          docker build -t my-app ./src
          docker tag my-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/my-app-repo:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/my-app-repo:latest

  # Step 2: Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: dev
      url: https://dev.my-app.com
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Deploy to ECS Dev Environment
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service dev-my-app-service \
            --force-new-deployment

  # Step 3: Deploy to QA
  deploy-qa:
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment:
      name: qa
      url: https://qa.my-app.com
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Deploy to ECS QA Environment
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service qa-my-app-service \
            --force-new-deployment

  # Step 4: Deploy to UAT
  deploy-uat:
    runs-on: ubuntu-latest
    needs: deploy-qa
    environment:
      name: uat
      url: https://uat.my-app.com
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Deploy to ECS UAT Environment
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service uat-my-app-service \
            --force-new-deployment

  # Step 5: Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-uat
    environment:
      name: production
      url: https://prod.my-app.com
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Deploy to ECS Production Environment
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service prod-my-app-service \
            --force-new-deployment
